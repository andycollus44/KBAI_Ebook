Section 04: Cases Revisited
::::::::::::::::::::::::::::::::::::::::

.. youtube:: -z7N0EoExx0
        :height: 315
        :width: 560
        :align: left

.. image:: ../../_static/Ch18/Slide04-01.png
        :height: 200px
        :width: 350px
        :alt: Class Goals
        :align: center


.. image:: ../../_static/Ch18/Slide04-02.png
        :height: 200px
        :width: 350px
        :alt: Class Goals
        :align: center


We have come across the notion of similarity earlier in this course. When we were discussing learning [by recording] cases, that particular point, we came across the matter of find- ing the nearest neighbor. At that point we found the nearest neighbor simply by looking at the [by recording] distance between the new situation, and the familiar situations. We came across the notion of similarity when we were discussing case reasoning as well at that point, we came across at least two different methods of organizing the case library. And that, in one method, we could simply organize all the cases in array here’s an array of several cases in the domain of navigation and urban area, each case here is represented, by the x and y location of the destination. A different and smarter method, also organizes cases that are discriminatory, the leaf nodes of this dis- crimination tree represented the cases. The root node and the interior nodes in the discrimination tree represented discrimination, or decisions about the values of specific features for example, east of 5th Street or not east of 5th street, both of these [by recording] schemes are based on measures of similarity. In the first scheme the similarity is based on the similarity between the tags, If a new problem were to come along it would be more or less similarly one of these cases depend- ing on whether or not its tags match the tags of a particular case here. In the second scheme of this [by recording] tree, similarity is based on, traversing this particular tree, If a new problem came along, we would use the features of that new problem to traverse this tree and find the case whose features best match your new problem. Note that the new problem, and the source cases in all of these examples so far have been in the same domain. Here for example, both the new problem and the source case are in the same domain of navigating in an urban area, in the previous example, the new problem and the source case were the domain of colored blocks in the blocks world. What happens if the new problem and the SOS case are not in the same domain? So consider the example of, a woman walking up the ladder and walking up the wall. The two dimension are the same, we’re talking about woman in one case and in other case, a ladder in one case, a wall in other case yeah, there’s some similarity. Situations like this, where the new problem and the source case are from different domains, lead to cross-domain analogies. So the question now becomes, how can we find leaf similarity between the new problem, the target problem, and the source case, if they happen to be in different domains?